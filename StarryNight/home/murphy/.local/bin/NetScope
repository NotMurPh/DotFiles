#!/bin/bash

# Simplify managing your vpn
Vpn() (

	name="l-hetzner1-1"
	ip="199.83.103.100"
	
	open_middle_man() {
		if [ "$3" == "udp2raw" ]; then
			udp2raw -c -l 0.0.0.0:4444 -r "$ip":2001 --cipher-mode xor --auth-mode simple --raw-mode icmp &> /dev/null &
		else
			forwarder -l 127.0.0.1:4444 -r "$ip":3001 -p passdg &> /dev/null &
		fi
	}

	close_middle_man() {
		if [ "$3" == "udp2raw" ]; then
			pkill udp2raw
		else
			pkill forwarder
		fi
	}

	# Prosses the subcommands
	case "${2,,}" in

		"on")
			wg-quick up "$name" &> /dev/null
			open_middle_man
			sudo -E eww update vpn_status="connected"
		;;

		"off")
			wg-quick down "$name" &> /dev/null
			sudo -E eww update vpn_status="disconnected"
		;;

		"reload")
			close_middle_man
			open_middle_man
		;;

		"kill"|"close")
			close_middle_man
		;;

		*)
			echo "Couldn't find the subcommand $2"	
		;;

	esac

)

# Manage your direct routes easily
Route() {

	# Check if user provided an ip address
	if [[ -z "$3" && "${2,,}" != "check" ]] ; then
		echo "You didn't enter the required ip address!" ; exit 1 
	fi

	# Get main interface name and gateway
	interface=$(nmcli c | awk -F '  ' 'NR==2 {print $1}')
	gateway=$(nmcli c show "$interface" | grep IP4.GATEWAY | awk '{print $2}')

	# Prosses the subcommands
	case "${2,,}" in

		"add")
			nmcli c modify "$interface" +ipv4.routes "$2 $gateway"
		;;

		"remove"|"delete")
			nmcli c modify "$interface" -ipv4.routes "$2 $gateway"
		;;

		"check")

			# Get the exsisting and new routes
			ips=$(awk '{print $2}' ~/.config/NetScope/Routes)
			routes=$(nmcli -t -f ipv4.routes c show "$interface" | sed 's/ipv4.routes://; s/, /,/g' )

			# Add the config file route if it doesn't exists
			for ip in $ips; do
				if ! echo "$routes" | grep -q "$ip"; then
					nmcli c modify "$interface" +ipv4.routes "$ip $gateway"
					echo "Route for ip $ip added!"
				fi
			done

			# Remove the exsisting route if it doesn't exists in config file
			IFS=','
			for route in $routes; do
				if ! echo "$ips" | grep -q "$(echo $route | awk -F '/' '{print $1}')"; then
					nmcli c modify "$interface" -ipv4.routes "$route"
					echo "Route $route removed!"
				fi
			done

		;;

		*)
			echo "Couldn't find the subcommand $2"	
		;;

	esac

	# Reload the interface
	nmcli c up "$interface"

	echo "$interface Updated successfully"

}

# Change between dns servers easily like a badbakhte irani
Dns() {

	case "{$2,,}" in

		"default"|"")
			server1="1.1.1.1"
			server2="8.8.8.8"
		;;

		"electro")
			server1="78.157.42.100"
			server2="78.157.42.101"
		;;

		"shecan")
			server1="178.22.122.100"
			server2="185.51.200.2"
		;;

		*)
			echo "Couldn't find the subcommand $2"	
		;;

	esac

	# Change the dns temporarily from the resolv.conf file
	echo -e "# Generated by ye iranie badbakht \\nnameserver $server1 \\nnameserver $server2" | sudo tee /etc/resolv.conf

	echo "DNS Updated successfully"

}

# Cycle through your network interfaces activating one at a time
Cycle() (

	# Updateing eww variables to match the current interface
	UpdateEww() {
		eww update cycle_btn_class="cycle_btn_class$2"
		eww update cycle_btn_status_class="cycle_btn_status_class$2"
		eww update cycle_btn_status="$1"
	}

	# Show message
	echo "Cycling through network interfaces!"

	# Get the current network interfaces and their states
	interface1="enp4s0"
	interface2="enp0s20f0u1"
	interface3="wlp0s20f0u10"
	interface4="enp0s20f0u6u1"
	interface1_state=$( nmcli connection | grep -o "$interface1" )
	interface2_state=$( nmcli connection | grep -o "$interface2" )
	interface3_state=$( nmcli connection | grep -o "$interface3" )
	interface4_state=$( nmcli connection | grep -o "$interface4" )
	interface2_existance=$( nmcli device | grep -o "$interface2" )

	# Cycling through interfaces
	if [[ "$interface1_state" == "$interface1" ]]; then

		if [[ "$interface2_existance" == "$interface2" ]]; then
			nmcli device connect "$interface2" || exit
			UpdateEww "P-Murphy" "2"
		else
			nmcli device connect "$interface3" || exit
			UpdateEww "I-Murphy" "3"
		fi
		nmcli device disconnect "$interface1"

	elif [[ "$interface2_state" == "$interface2" ]]; then

		nmcli device connect "$interface3" || exit
		nmcli device disconnect "$interface2"
		UpdateEww "I-Murphy" "3"

	elif [[ "$interface3_state" == "$interface3" ]]; then

		nmcli device connect "$interface4" || exit
		nmcli device disconnect "$interface3"
		UpdateEww "S-Murphy" "4"

	elif [[ "$interface4_state" == "$interface4" ]]; then

		nmcli device connect "$interface1" || exit
		nmcli device disconnect "$interface4"
		UpdateEww "M-Murphy" "1"

	# When you disconnect your connected device
	else

		nmcli device connect "$interface1" || exit
		nmcli device disconnect "$interface3"
		UpdateEww "M-Murphy" "1"

	fi

)

# The function responsable for setuping namespaces
CreateNetNS() {

	# Rename the input variables for clarity
	name="$1"
	interface="$2"
	gateway="$3"
	move="$4"
	ns_interface="$interface"

	# Check to see if the interface provided actually exists
	if ! ip -br a | grep -Fq "$interface"; then 
		echo "Interface not found!"
		exit 1 
	fi
	
	# Create & setup the namespace if it's not already created
	if ! ip netns | grep -Fq "$name"; then

		# Make the namespace resolv.conf file
		if [ ! -f /etc/netns/"$name"/resolv.conf ]; then
			mkdir -p /etc/netns/"$name"/
			cp /etc/resolv.conf /etc/netns/"$name"/resolv.conf
		fi

		# Create the namespace
		ip netns add "$name"

		# Check if we should move the interface into the namespace
		if [ move = true ]; then

			# If the interface is a wireless one do as follows to move it:
			if [[ "$interface" = "wl"* ]]; then

				iw phy phy0 set netns name "$name"
				ip -n "$name" link set dev "$interface" address "16:93:e3:46:7a:88"
				wpa_passphrase "I-Murphy" "Password" | sed "$d;"| sed "$a\\tscan_ssid=1\n}" > /tmp/wpa-"$name".conf
				ip netns exec "$name" wpa_supplicant -B -D wext -i "$interface" -c /tmp/wpa-"$name".conf
				echo "! Add 16:93:e3:46:7a:88 to your wifi macfilter !"

			# If it wasn't a wireless interface do as follows to move it:
			else
				ip link set "$interface" netns "$name"
				#ip netns exec $name dhcpcd --ipv4only --oneshot --nobackground
			fi
			
		# If we shouldn't move the interface do this:
		else

			# Create an ipvlan interface that is linked to the main interface and move it to the namespace
			ip link add ipvlan0 link "$interface" type ipvlan mode l2
			ip link set ipvlan0 netns "$name"
			ns_interface="ipvlan0"

		fi

		# Turning on the namespace interfaces & giving them ip address + default route
		ip -n "$name" link set "$ns_interface" up
		ip -n "$name" link set lo up
		ip -n "$name" addr add 192.168.1.110/24 dev "$ns_interface"
		ip -n "$name" route add default via "$gateway"

		# Make ping don't require root access
		ip netns exec "$name" sysctl net.ipv4.ping_group_range='0 2147483647' > /dev/null

		echo "Succesfuly created the namespace!"

	else
		echo "The namespace is already created!"
	fi

}

# Manage a direct namespace that clones the main interface raw ( without a vpn )
Direct() {

	# Get the active interface/gateway
	routes=$(ip r)
	interface=$(echo "$routes" | grep default | awk '{print $5}')
	gateway=$(echo "$routes" | grep default | awk '{print $3}')

	# Prosses the subcommands
	case "${2,,}" in

		"status")
			text="doesn't exists!"
			if ip netns | grep -Fq Direct; then text="is up and running :)" ; fi
			echo "Direct namespace $text"
		;;

		"create"|"")
			CreateNetNS "Direct" "$interface" "$gateway" false
		;;

		"delete"|"remove")
			ip netns delete Direct
			echo "Namespace deleted succesfuly"
		;;

		"exec"|"run")
			CreateNetNS "Direct" "$interface" "$gateway" false
			ip netns exec Direct sudo -E -u murphy $3
		;;

		*)
			echo "Couldn't find the subcommand $2"
		;;

	esac

}

# Isolate network interfaces from the main namespace
Isolate() {

	# Prosses the subcommands
	case "${2,,}" in

		"status"|"")
			echo "Running isolate namespaces are:"
			echo $(ip netns | grep -v "Direct")
		;;

		"create"|"add")
			CreateNetNS "$3" "$3" "192.168.1.1" true
		;;

		"delete"|"remove")
			ip netns exec "$3" iw phy phy0 set netns 1
			ip netns del "$3"
			pkill -f "/tmp/wpa-$3.conf"
			nmcli d disconnect "$3"
			echo "Namespace removed succesfuly"
		;;

		"exec"|"run")
			CreateNetNS "$3" "$3" "192.168.1.1" true
			ip netns exec "$3" sudo -E -u murphy $4
		;;

		*)

			# If the argument is an interface name create the namespace
			if ! ip -br a | grep -Fq "$2"; then 
				CreateNetNS "$3" "$3" "192.168.1.1" true
			fi

			# Otherwise we don't know what user wants :\
			echo "Couldn't find the subcommand $2"

		;;

	esac

}

# Main argument handler
case "${1,,}" in

	"vpn")

		# Only execute commands if we are not executing already
		if [[ "$(pgrep 'NetScope')" != "$$" ]]; then
			exit 1
		fi

		# Make sure we have root access ;)
		if [ $(id -u) -ne 0 ]; then
			echo "Root access required!, run using sudo -E"
			exit 1
		fi

		Vpn "$1" "$2" "$3"

	;;

	"route")
		Route "$1" "$2" "$3"
	;;

	"dns")
		Dns "$1" "$2" "$3"
	;;

	"cycle")

		# Only execute commands if we are not executing already
		if [[ "$(pgrep 'NetScope')" != "$$" ]]; then
			exit 1
		fi

		Cycle

	;;

	"direct")

		# Make sure we have root access ;)
		if [ $(id -u) -ne 0 ]; then
			echo "Root access required!, run using sudo -E"
			exit 1
		fi

		Direct "$1" "$2" "$3"

	;;

	"isolate")

		# Make sure we have root access ;)
		if [ $(id -u) -ne 0 ]; then
			echo "Root access required!, run using sudo -E"
			exit 1
		fi

		Isolate "$1" "$2" "$3"

	;;

	*)
		echo "Couldn't find command $1"
	;;

esac
