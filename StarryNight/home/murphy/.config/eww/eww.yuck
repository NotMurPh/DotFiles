
; actions window ( left bar ) ------------------------------------------------------------------------------------------------------------------------------------------------------------

(
        defwindow actions
        :monitor 0
        :geometry (
                geometry 
                :x "-759px"
                :y "15px"
                :width "373px"
                :height "35px"
                :anchor "top center"
        )
        :stacking "fg"
        :windowtype "dock"
        :reserve ( struts :distance "50px" :side "top" )
        :wm-ignore false
        ( actions :class "actions" )
)

; actions widget all of actions goes into this widget 

(
        defwidget actions [ ]
        ( 
                centerbox
                (
                        box
                        :space-evenly false

                        ( power_menu )

                        ( network )

                        ( vpn )
                )

                ( box )
                        
                ( literal :content workspaces :halign "end")
        )
)

; power menu widget ------------------------------------------------------------------------------------------------------------------------------------------------------------------

(
        defwidget power_menu [ ]
	(
                eventbox
                :onhover "eww update power_menu=true"
		:onhoverlost "eww update power_menu=false"
                (
                        box
			:space-evenly false
                        
                        (
                                button
                                :class "shutdown_btn"
                                :tooltip "Shutdown"
                                :onclick "shutdown now"
                                ""
                        )

                        (
                                revealer
                                :transition "slideleft"
				:reveal power_menu
				:duration "400ms"
	
                                (
                                        box
                                        :space-evenly false

                                        (
                                                button
                                                :class "reboot_btn"
                                                :tooltip "Reboot"
                                                :onclick "reboot"
                                                ""
                                        )

                                        (
                                                button
                                                :class "lock_btn"
                                                :tooltip "Lock"
                                                :onclick "light-locker-command -l"
                                                ""
                                        )

                                )
                        )
                ) 
        )
)

; power_menu variable representing hover

( defvar power_menu false )

; network widget ------------------------------------------------------------------------------------------------------------------------------------------------------------------------

(
        defwidget network [ ] 
        (
                eventbox
                :onhover "eww update network_hover=true"
				:onhoverlost "eww update network_hover=false"
                (
                        box
                        :space-evenly false

                        ( button :class "${cycle_btn_class}" :onclick "cycle_networks &" "直")

                        (
                                revealer
                                :transition "slideleft"
								:reveal network_hover
								:duration "400ms"

                                ( button :class "${cycle_btn_status_class}" :onclick "cycle_networks &" "${cycle_btn_status}" )
                        )

                )
        )
)

; network_hover variable representing hover

( defvar network_hover false )

; cycle_btn_class variable representing cycle button class

( defvar cycle_btn_class "cycle_btn_class1" )

; cycle_btn_status_class variable representing cycle button status class

( defvar cycle_btn_status_class "cycle_btn_status_class1" )

; cycle_btn_status variable representing cycle button status

( defvar cycle_btn_status "M-Murphy" )

; vpn widget ------------------------------------------------------------------------------------------------------------------------------------------------------------------

(
        defwidget vpn [ ]
        (
                eventbox
                :onhover "eww update vpn_hover=true"
                :onhoverlost "eww update vpn_hover=false"

                (
                        box
                        :space-evenly false

                        ( button :class "${vpn_status=='connected' ? 'vpn_btn_on' : 'vpn_btn_off'}" :onclick "vpn ${vpn_status=='connected' ? 'off' : 'on'} &" "${vpn_status=='connected' ? '聯' : '輦' }" )

                        (
                                revealer
                                :transition "slideleft"
								:reveal vpn_hover
								:duration "400ms"

                                ( button :class "${vpn_status=='connected' ? 'vpn_status_on' : 'vpn_status_off'}" :onclick "vpn ${vpn_status=='connected' ? 'off' : 'on'} &" "${vpn_status=='connected' ? 'On' : 'Off'}" )
                        )
                )
        )
)

; vpn_hover variable representing hover

( defvar vpn_hover false)

; vpn_status variable representing vpn status

( defvar vpn_status "connected" )

; workspaces variable gets workspaces widget from wrokspaces script -------------------------------------------------------------------------------------------------------------------

( deflisten workspaces "workspaces" )

; spotify window ( middle bar ) ------------------------------------------------------------------------------------------------------------------------------------------------------------

(
        defwindow spotify
        :monitor 0
        :geometry (
                geometry 
                :x "0%"
                :y "15px"
                :width "900px"
                :height "35px"
                :anchor "center top"
        )
        :stacking "fg"
        :windowtype "dock"
        :reserve ( struts :distance "40px" :side "top" )
        :wm-ignore false
        ( spotify :class "spotify" )
)

; spotify widget all of spotify goes into this widget 

(
        defwidget spotify [ ]
        (
                centerbox
                
                (
                        box
                        :space-evenly false

                        ( label :class "${ spotify_status=='' ? 'spotify_off_icon' : 'spotify_on_icon' }" :text "" )
                
                        ( label :class "${ spotify_status=='' ? 'spotify_status_off' : 'spotify_status_on' }" :style "padding-right:${ strlength(track) * 0.4 }px;" :text "${ spotify_status=='' ? 'Spotify is offline' : '${track}'}" )
                )

                (
                        scale
                        :visible "${ spotify_status=='' ? false : true}"
                        :class "player_time"
                        :value player_progress
                        :max 101
                        :min 0
                        :width { 580 - strlength(track) * 9 }
                        :onchange "spotify_ctl --seek {}"
                )

                (
                        box
                        :space-evenly false
                        :visible "${ spotify_status=='' ? false : true}"
                        :halign "end" 

                        ( button :class "${ shuffle_status=='On' ? 'shuffle_btn_on' : 'shuffle_btn_off' }" :onclick "${ shuffle_status=='On' ? 'eww update shuffle_status=Off && spotify_ctl --shuffle' : 'eww update shuffle_status=On && spotify_ctl --shuffle' }" "列")

                        ( button :class "prev_btn" :onclick "spotify_ctl --prev" "玲" )
        
                        ( button :class "play_btn" :onclick "${spotify_status=='Playing' ? 'eww update spotify_status=Paused && spotify_ctl --toggle-player' : 'eww update spotify_status=Playing && spotify_ctl --toggle-player'}" "${spotify_status=='Playing' ? '' : '契'}" )

                        ( button :class "next_btn" :onclick "spotify_ctl --next" "怜" )

                        ( button :class "${ loop_status!='None' ? 'loop_btn_on' : 'loop_btn_off' }" :onclick "spotify_ctl --loop" "${ loop_status=='Playlist' || loop_status=='None' ? '凌' : '綾' }" )
        
                        ( label :class "volume_icon" :text "墳" )

                        (
                                scale  
                                :class "volume"
                                :value spotify_volume
                                :max 101
                                :min 0
                                :width 100
                                :onchange "spotify_ctl --volume {}"
                        )
                )

        )

        
)

; track variable gets the current track from playerctl

( defpoll track :initial "" :interval "0.5s" "spotify_ctl --track" )

; spotify_status variable gets spotify status ( offline playing paused )

( defpoll spotify_status :initial "Paused" :interval "0.5s" "spotify_ctl --status" )

; shuffle_status variable checks to see if the shuffle is active

( defpoll shuffle_status :initial "Off" :interval "1s" "spotify_ctl --shuffle-status" )

; spotify_volume variable representing spotify volume

( defpoll spotify_volume :initial "0" :interval "1s" "spotify_ctl --volume" )

; spotify_volume variable representing loop status

( defpoll loop_status :initial "None" :interval "0.1s" "spotify_ctl --loop-status" )

; player_progress variable gets the player progress

( defpoll player_progress :initial 0 :interval "1s" "spotify_ctl --progress" )

; info window ( right bar ) -----------------------------------------------------------------------------------------------------------------------------------

(
        defwindow info
        :monitor 0
        :geometry (
                geometry 
                :x "760px"
                :y "15px"
                :width "370px"
                :height "35px"
                :anchor "center top"
        )
        :stacking "fg"
        :windowtype "dock"
        :reserve ( struts :distance "40px" :side "top" )
        :wm-ignore false
        ( info :class "info" )
)

; info widget all of info goes into this widget 

(
	defwidget info [] 
        (
                centerbox

                (       
                        box
                        :space-evenly false

                        ( label :class "disk_icon" :text "" )

                        ( label :class "disk_space" :text "${round(EWW_DISK["/"].free/(1024*1024*1024),1)}GB" )

                        ( label :class "ram_icon" :text "" )

                        ( label :class "ram_usage" :text "${ram_usage}B" )
                )

                (
                        box
                        :space-evenly false
                        
                        ( label :class "cpu_icon" :text "" )

                        ( label :class "cpu_usage" :text "${round(EWW_CPU.avg,0)}%" )
                )

                (       
                        box
                        :space-evenly false
                        :halign "end"

                        ( label :class "clock_icon" :text "" :tooltip "${date}" )
        
                        ( label :class "time" :text "${time}" :tooltip "${date}" )
                )
	)
)

; time variable gets the time every one second

( defpoll time :initial "time" :interval "1s" "date +%I:%M" )

; time variable gets the time every one second

( defpoll date :initial "date" :interval "1s" "echo $(date +%_F ; echo '(' ; date +%B ; date +%A ; echo ')' )" )

; ram_usage variable gets the free ram size every one second

( defpoll ram_usage :initial "ram" :interval "1s" "free -h | awk '/^Mem/ { print $3 }' | sed s/i//g" )

; date window ( second monitor middle ) -----------------------------------------------------------------------------------------------------------------------------------

(
        defwindow dates
        :monitor 1
        :geometry (
                geometry 
                :x "0%"
                :y "15px"
                :width "1890px"
                :height "35px"
                :anchor "center top"
        )
        :stacking "fg"
        :windowtype "dock"
        :reserve ( struts :distance "50px" :side "top" )
        :wm-ignore false
        ( dates )
)

; dates widget all of dates goes into this widget

(
        defwidget dates []
        (
                centerbox
                :class "dates"

                ( label :class "gorgian" :text "${date}" :halign "start" )

                (
                        box
                        :space-evenly false
                        
                        ( label :class "arrow_left" :text "<~~" )

                        ( label :class "time" :text "${time2}" )

                        ( label :class "arrow_right" :text "~~>" )
                )

                ( label :class "jalali" :text "${date_jalali}" :halign "end" )
        )
)

; date_jalali variable gets the iranian date every second

( defpoll date_jalali :initial "date" :interval "1s" "echo $( jdate +%F ; echo '(' ; jdate +%B ; jdate +%q | sed 's/-//' ; echo ')' )" )

; time2 variable gets the time every one second

( defpoll time2 :initial "time" :interval "1s" "echo $(date +%I:%M ; date +%p)" )
