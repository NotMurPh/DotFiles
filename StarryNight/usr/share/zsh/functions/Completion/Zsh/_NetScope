#compdef NetScope

# Completion script for NetScope, ChatGPT wrote this, I'm too lazy, don't roast me

function _NetScope() {
    local context state state_descr line
    typeset -A opt_args

    # Function to get all network interfaces
    local -a interfaces
    interfaces=(${(f)"$(networkctl 2>&1 | grep "ether\|wlan" | awk '{print $2}')"})

    # Function to get isolate namespace names
    local -a namespaces
    namespaces=(${(f)"$(ip netns | awk '{print $1}')"})

    # Function to filter interfaces based on namespaces
    local -a filtered_interfaces
    for interface in "${interfaces[@]}"; do
        if echo "${namespaces[@]}" | grep -q "$interface"; then
            filtered_interfaces+=("$interface")
        fi
    done
	filtered_interfaces=("-" "${filtered_interfaces[@]}" "${namespaces[@]}")

    # Function to get VPN modes
    local -a vpn_modes
    vpn_modes=("forwarder" "udp2raw")

    _arguments -C \
        '1:command:->commands' \
        '2:subcommand:->subcommands' \
        '*:interface:->interfaces' && return 0

    if [[ $state == commands ]]; then
        _describe -t commands 'NetScope commands' '(
            "vpn:Manage your VPN connection"
            "route:Manage your direct routes"
            "dns:Switch between DNS servers"
            "cycle:Cycle through your network interfaces"
            "netns:Create and manage network namespaces"
            "rofi:NetScope NetNS integration for Rofi"
        )' && return 0
    fi

    case $line[1] in
        vpn)
            if [[ ${line[2]} == "on" || ${line[2]} == "reload" || ${line[2]} == "kill" || ${line[2]} == "close" ]]; then
                _describe -t vpn_modes 'VPN modes' vpn_modes && return 0
            elif [[ ${line[2]} == "off" ]]; then
                _message "No further arguments needed for 'off'" && return 0
            else
                _describe -t subcommands 'VPN subcommands' '(
                    "on:Enable VPN and open forwarder"
                    "off:Disable VPN"
                    "reload:Reload VPN settings"
                    "kill:Kill VPN forwarder process"
                    "close:Kill VPN forwarder process"
                )' && return 0
            fi
            ;;
        route)
            if [[ ${line[2]} == "add" || ${line[2]} == "remove" || ${line[2]} == "delete" ]]; then
                _describe -t interfaces 'Network interfaces' filtered_interfaces && return 0
            else
                _describe -t subcommands 'Route subcommands' '(
                    "add:Add a new route"
                    "remove:Remove an existing route"
                    "delete:Remove an existing route"
                    "load:Load the routes from the configuration file"
                )' && return 0
            fi
            ;;
        dns)
            _describe -t subcommands 'DNS subcommands' '(
                "default:Set DNS to default servers (1.1.1.1 and 8.8.8.8)"
                "electro:Set DNS to Electro servers (78.157.42.100 and 78.157.42.101)"
                "shecan:Set DNS to Shecan servers (178.22.122.100 and 185.51.200.2)"
                "radar:Set DNS to Radar servers (10.202.10.10 and 10.202.10.11)"
            )' && return 0
            ;;
        cycle)
            _message "No subcommands for cycle" && return 0
            ;;
        netns)
            local -a netns_interfaces
            netns_interfaces=("${interfaces[@]}" "${namespaces[@]}")
            
            if [[ $line[2] == "create" ]]; then
                _describe -t interfaces 'Network interfaces' interfaces && return 0
            elif [[ $line[2] == "exec" || $line[2] == "run" ]]; then
                _describe -t netns_interfaces 'Network namespaces' netns_interfaces && return 0
            elif [[ $line[2] == "delete" || $line[2] == "remove" ]]; then
                _describe -t netns_fi 'Network namespaces' filtered_interfaces && return 0
            else
                _describe -t subcommands 'NetNS subcommands' '(
                    "status:Check the status of network namespaces"
                    "create:Create a new network namespace"
                    "delete:Remove a network namespace"
                    "remove:Remove a network namespace"
                    "exec:Execute a command in a network namespace"
                    "run:Execute a command in a network namespace"
                )' && return 0
            fi
            ;;
        rofi)
            _message "No subcommands for rofi" && return 0
            ;;
    esac

    if [[ $state == interfaces ]]; then
        local -a all_interfaces
        all_interfaces=("${interfaces[@]}" "${namespaces[@]}")
        _describe -t all_interfaces 'Network interfaces' all_interfaces && return 0
    fi
}

_NetScope "$@"
