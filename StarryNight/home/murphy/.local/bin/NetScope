#!/bin/bash

# Simplify managing your vpn
Vpn() (

	name="l-hetzner1-1"
	ip="199.83.103.100"
	
	open_middle_man() {
		if [ "$3" == "udp2raw" ]; then
			udp2raw -c -l 0.0.0.0:4444 -r "$ip":2001 --cipher-mode xor --auth-mode simple --raw-mode icmp &> /dev/null &
		else
			forwarder -l 127.0.0.1:4444 -r "$ip":3001 -p passdg &> /dev/null &
		fi
	}

	close_middle_man() {
		if [ "$3" == "udp2raw" ]; then
			pkill udp2raw
		else
			pkill forwarder
		fi
	}

	# Prosses the subcommands
	case "${2,,}" in

		"on")
			wg-quick up "$name" &> /dev/null
			open_middle_man
			sudo -E eww update vpn_status="connected"
		;;

		"off")
			wg-quick down "$name" &> /dev/null
			sudo -E eww update vpn_status="disconnected"
		;;

		"reload")
			close_middle_man
			open_middle_man
		;;

		"kill"|"close")
			close_middle_man
		;;

		*)
			echo "Error: Couldn't find the subcommand $2"	
		;;

	esac

)

# Check and fix carrier for wireless interfaces configured using NetworkManager
CheckCarrier() {

	# Rename variables for clarity
	interface="$1"

	# Return if the intreface isn't a wireless one
	if [[ "$interface" != "wl"* ]]; then return 1 ; fi

	# Return if interface already has a carrier
	if ! ip -br l show "$interface" | grep -q "NO"; then return 1 ; fi

	# Get the interface configuration from NetworkManager
	interface_config_file=$(grep -rl "name=$interface" "/etc/NetworkManager/system-connections/" | xargs -n 1 basename)
	ssid=$(grep "ssid=" "/etc/NetworkManager/system-connections/$interface_config_file" | cut -d '=' -f 2)
	password=$(grep "psk=" "/etc/NetworkManager/system-connections/$interface_config_file" | cut -d '=' -f 2)

	# Fix the interface without messing up with NetworkManager
	dbus_interface_path=$(gdbus call --system --dest fi.w1.wpa_supplicant1 --object-path /fi/w1/wpa_supplicant1 --method fi.w1.wpa_supplicant1.GetInterface "$interface" | sed -n "s/.*'\([^']*\)'.*/\1/p" )
	gdbus call --system --dest fi.w1.wpa_supplicant1 --object-path "$dbus_interface_path" --method fi.w1.wpa_supplicant1.Interface.RemoveAllNetworks > /dev/null
	dbus_network_path=$(gdbus call --system --dest fi.w1.wpa_supplicant1 --object-path "$dbus_interface_path" --method fi.w1.wpa_supplicant1.Interface.AddNetwork '{"ssid":<"'$ssid'">,"scan_ssid":<1>,"psk":<"'$password'">}' | sed -n "s/.*'\([^']*\)'.*/\1/p" )
	gdbus call --system --dest fi.w1.wpa_supplicant1 --object-path "$dbus_interface_path" --method fi.w1.wpa_supplicant1.Interface.SelectNetwork "$dbus_network_path" > /dev/null

}

# Manage your direct routes easily
Route() {

	# Define some default variables
	interface=$(ip r | awk 'NR==1 {print $5}')
	ip="$3"

	# Check if user provided an interface
	if [ -n "$3" ] && nmcli d | grep -Eq "(^| )$3($| )"; then
		interface="$3"
		ip="$4"
	fi

	# Check if user provided an ip address
	if [[ "${2,,}" != "check" && -z "$ip" ]]; then
		echo "Error: You didn't enter the required ip address!" ; exit 1 
	fi

	# Get the interface gateway
	nmcli_interface_info=$(nmcli d show "$interface")
	if echo "$nmcli_interface_info" | grep -q "disconnected"; then
		CheckCarrier "$interface"
		gateway=$(dhclient -v -r "$interface" 2>&1 | grep "DHCPRELEASE" | awk '{print $7}')
	else
		gateway=$(echo "$nmcli_interface_info" | grep "IP4.GATEWAY" | awk '{print $2}')
	fi

	# Get the interface connection name
	interface_config_file=$(grep -rl "name=$interface" "/etc/NetworkManager/system-connections/" | xargs -n 1 basename)
	connection=$(grep "^id=" "/etc/NetworkManager/system-connections/$interface_config_file" | cut -d '=' -f 2)

	# Prosses the subcommands
	case "${2,,}" in

		"add")
			nmcli c modify "$connection" +ipv4.routes "$ip $gateway"
		;;

		"remove"|"delete")
			nmcli c modify "$connection" -ipv4.routes "$ip $gateway"
		;;

		"check")

			# Get the exsisting and new routes
			ips=$(awk '{print $2}' ~/.config/NetScope/Routes)
			routes=$(nmcli -t -f ipv4.routes c show "$connection" | sed 's/ipv4.routes://; s/, /,/g' )

			# Add the config file routes if they don't exist in the interface
			for ip in $ips; do
				if ! echo "$routes" | grep -q "$ip"; then
					nmcli c modify "$connection" +ipv4.routes "$ip $gateway"
					echo "Route for ip $ip added!"
				fi
			done

			# Remove the exsisting routes if they don't exist in the config file
			IFS=','
			for route in $routes; do
				if ! echo "$ips" | grep -q "$(echo $route | awk -F '/' '{print $1}')"; then
					nmcli c modify "$connection" -ipv4.routes "$route"
					echo "Route $route removed!"
				fi
			done

		;;

		*)
			echo "Error: Couldn't find the subcommand $2"
		;;

	esac

	# Reload the interface if it's connected
	if echo "$nmcli_interface_info" | grep -wq "connected"; then
		nmcli c up "$connection" > /dev/null
	fi

	echo "$interface Updated successfully"

}

# Change between dns servers easily like a badbakhte irani
Dns() {

	case "{$2,,}" in

		"default"|"")
			server1="1.1.1.1"
			server2="8.8.8.8"
		;;

		"electro")
			server1="78.157.42.100"
			server2="78.157.42.101"
		;;

		"shecan")
			server1="178.22.122.100"
			server2="185.51.200.2"
		;;

		*)
			echo "Error: Couldn't find the subcommand $2"	
		;;

	esac

	# Change the dns temporarily using the /etc/resolv.conf file
	echo -e "# Generated by ye iranie badbakht \\nnameserver $server1 \\nnameserver $server2" | sudo tee /etc/resolv.conf

	echo "DNS Updated successfully"

}

# Cycle through your network interfaces activating one at a time
Cycle() (

	echo "Cycling through network interfaces!"

	# Interfaces and their ssids to loop through
	interfaces=("enp6s0" "enp0s20f0u1" "wlp0s20f0u10" "enp0s20f0u6u1")
	ssids=("M-Murphy" "P-Murphy" "I-Murphy" "S-Murphy")
	nmcli_devices=$(nmcli d)

	# Get the active interface index
	active_interface=$(ip r | awk 'NR==1 {print $5}')
	active_interface_index=$(printf "%s\n" "${interfaces[@]}" | grep -n "$active_interface" | cut -d: -f1 | awk '{print $1 - 1}')

	# loop through the next possible interfaces
	for (( offset=1 ; offset <= 3 ; offset++ )); do

		# Get the index of the next interface in the list
		next_interface_index=$(( ($active_interface_index + offset) % ${#interfaces[@]} ))

		# Make sure that interface exists otherwise use the next one
		echo "$nmcli_devices" | grep -q "${interfaces[$next_interface_index]}" && break

	done

	# Cycle to the next available interface
	nmcli d connect "${interfaces[$next_interface_index]}" || exit 1
	nmcli d disconnect "$active_interface"
	CheckCarrier "$active_interface"

	# Updateing eww variables to match the current interface
	eww update cycle_btn_class="cycle_btn_class$((next_interface_index + 1))"
	eww update cycle_btn_status_class="cycle_btn_status_class$((next_interface_index + 1))"
	eww update cycle_btn_status="${ssids[$next_interface_index]}"

)

# The function responsable for setting up namespaces
CreateNetNS() {

	# Define some variables
	interface="$1"
	name="$interface-$(echo $(ip netns | grep $interface | wc -l) + 1 | bc)"

	# Don't run if we're in a namespace
	if [[ -n $(ip netns identify) ]]; then echo "Error: Cannot create a nested network namespace!" ; return 1 ; fi

	# Check to see if the interface provided actually exists
	if ! ip -br a | grep -Eq "(^| )$interface($| )"; then echo "Error: Interface not found!" ; return 1 ; fi

	# If interface is a wireless one make sure it has a carrier
	CheckCarrier "$interface"

	# Create the namespace
	ip netns add "$name"

	# Make the namespace resolv.conf file
	if [ ! -f /etc/netns/"$name"/resolv.conf ]; then
		mkdir -p /etc/netns/"$name"
		cp /etc/resolv.conf /etc/netns/"$name"/resolv.conf
	fi

	# Get the gateway of the interface
	nmcli_interface_info=$(nmcli d show "$interface")
	if echo "$nmcli_interface_info" | grep -q "disconnected"; then
		gateway=$(dhclient -v -r "$interface" 2>&1 | grep "DHCPRELEASE" | awk '{print $7}')
	else
		gateway=$(echo "$nmcli_interface_info" | grep "IP4.GATEWAY" | awk '{print $2}')
	fi

	# Find a free ip address to use
	taken_ips=$(ip -br a ; ip -all netns exec ip -br a)
	for each_subnet in {2..255}; do
		! echo "$taken_ips" | grep -wq "${gateway%.*}.$each_subnet" && ip="${gateway%.*}.$each_subnet" && break
	done

	# Create an ipvlan interface that is linked to the main interface then move it to the created namespace
	ip link add ipvlan link "$interface" type ipvlan mode l2
	ip link set ipvlan netns "$name"

	# Turning on the namespace interfaces
	ip -n "$name" link set ipvlan up
	ip -n "$name" link set lo up

	# Assign the ip address and the default route
	ip -n "$name" addr add "$ip/24" dev ipvlan
	ip -n "$name" route add default via "$gateway"

	# Make pinging don't require root access
	ip netns exec "$name" sysctl net.ipv4.ping_group_range='0 2147483647' > /dev/null

	echo "Succesfuly created the namespace $name!"

}

# Create and manage network namespaces assigned to your interfaces
NetNS() {

	# Get the active interface
	interface=$(ip r | awk 'NR==1 {print $5}')
	if [ -n "$3" ];then interface="$3" ; fi

	# Prosses the subcommands
	case "${2,,}" in

		"status"|"")
			ip netns
		;;

		"create")
			CreateNetNS "$interface"
		;;

		"delete"|"remove")
			if [[ ! "$interface" =~ -[0-9]+$ ]]; then
				for netns in $(ip netns | grep "$interface" | awk '{print $1}'); do
					ip netns delete "$netns"
					rm -r /etc/netns/"$netns"
					echo "NetNS $netns removed successfully!"
				done
			else
				ip netns delete "$interface"
				rm -r /etc/netns/"$interface"
				echo "NetNS $interface removed successfully!"
			fi
		;;

		"exec"|"run")
			if [[ ! "$interface" =~ -[0-9]+$ ]]; then
				CreateNetNS "$interface" || exit 1
				interface="$interface-$(ip netns | grep $interface | wc -l)"
			fi
			ip netns exec "$interface" sudo -Esu $(logname) eval "${@:4}"
		;;

		*)
			echo "Error: Couldn't find the subcommand $2"
		;;

	esac

}

# NetScope NetNS integration for Rofi
Rofi() {

	# Get the inerface names
	interfaces=$(ip netns | awk '{print $1}')
	interfaces+="$(echo && nmcli d | grep -v "loopback\|wireguard" | awk 'NR > 1 {print $1}')"

	# If we got an interface use it otherwise show the interfaces
	if [ -n "$2" ]; then
		daemon -u $(logname) -D ~ -- sudo -E NetScope NetNS Run "$2" "rofi -show drun"
	else
		echo "$interfaces"
	fi

}

# Configure your network interfaces
Configure() {

	# Check for interface existance
	if nmcli d | awk 'NR > 1 {print $1}' | grep -Eq "(^| )$2($| )"; then

		# Get the connection name
		interface_config_file=$(grep -rl "name=$2" "/etc/NetworkManager/system-connections/" | xargs -n 1 basename)
		connection=$(grep "^id=" "/etc/NetworkManager/system-connections/$interface_config_file" | cut -d '=' -f 2)

		# Basic nmcli setup
		nmcli c modify "$connection" connection.autoconnect no
		nmcli c modify "$connection" connection.dns-over-tls yes
		nmcli c modify "$connection" ipv4.ignore-auto-dns yes
		nmcli c modify "$connection" ipv4.dns "1.1.1.1,8.8.8.8"

		# Setup routes
		NetScope route check "$2"

	else
		echo "Error: Inteface doesn't exists"
	fi

}

# Make sure we have root access ;)
if [ $(id -u) -ne 0 ]; then
	echo "Error: Root access required!, run using sudo -E" ; exit 1
fi

# Main argument handler
case "${1,,}" in

	"vpn")

		# Only execute commands if we are not executing already
		if [[ "$(ps aux | grep 'Ss' | grep 'NetScope vpn' | grep -v 'grep' | wc -l)" -gt 1 ]]; then
			exit 1
		fi

		Vpn "$@"

	;;

	"route")
		Route "$@"
	;;

	"dns")
		Dns "$@"
	;;

	"cycle")

		# Only execute commands if we are not executing already
		if [[ "$(ps aux | grep 'Ss' | grep 'NetScope cycle' | grep -v 'grep' | wc -l)" -gt 1 ]]; then
			exit 1
		fi

		Cycle "$@"

	;;

	"netns")
		NetNS "$@"
	;;

	"rofi")
		Rofi "$@"
	;;

	"configure")
		Configure "$@"
	;;

	*)
		echo "Error: Couldn't find command $1"
	;;

esac
